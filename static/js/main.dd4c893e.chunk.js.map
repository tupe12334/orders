{"version":3,"sources":["assets/MyTheme.js","services/firebase.js","components/OrderInputForum.js","services/cityList.js","services/StreetsList.js","pages/Routes.js","pages/Home.js","pages/OrderPlace.js","pages/Show.js","components/Body.js","components/Menu.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["MyTheme","createMuiTheme","direction","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","OrderInputForum","cityListO","useState","streetList","setStreetList","streetListO","setStreetListO","cityList","setCityList","citySelected","setCitySelected","initialValues","status","orderSetDate","Date","reciverName","city","street","house","useEffect","setArrayInState","$","ajax","dataType","success","data","find","each","cityNameOBJ","this","push","textContent","trim","getCityList","map","option","firstLetter","toUpperCase","test","title","undefined","length","Typography","color","variant","onSubmit","setSubmitting","resetForm","DDdate","String","getDate","padStart","MMdate","getMonth","YYdate","getFullYear","MMtime","getMinutes","HHtime","getHours","SStime","getSeconds","ref","sendTextToFireBase","console","log","validateSchema","object","number","min","values","isSubmitting","setFieldValue","handleChange","FormControl","margin","required","label","name","type","component","TF","Autocomplete","id","options","getOptionLabel","groupBy","onChange","e","value","params","resource_id","limit","q","fields","sort","StreetsList","request","url","result","records","forEach","includes","שם_ישוב","שם_רחוב","getStreets","noOptionsText","renderInput","TextField","loadingText","Button","disabled","endIcon","Icon","style","transform","CircularProgress","size","Routes","path","sidebarName","icon","Body","prop","exact","Error","Menu","display","textAlign","fontSize","Divider","List","MenuList","key","to","textDecoration","MenuItem","selected","routeName","window","location","pathname","ListItemIcon","ListItemText","primary","NavBar","React","menuDrawerState","setMenuDrawerState","toggleDrawer","open","event","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","Drawer","onClose","role","onKeyDown","fontWeight","jss","create","plugins","jssPreset","rtl","App","ThemeProvider","theme","StylesProvider","className","dir","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd4c893e.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles'\r\n\r\n\r\nconst MyTheme = createMuiTheme({\r\n    direction: 'rtl',\r\n    \r\n  });\r\n\r\n  export default  MyTheme","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCKxKgE1Mh7DauQBBhHAnJnnuIJaRLhj74\",\r\n    authDomain: \"orders-cd834.firebaseapp.com\",\r\n    databaseURL: \"https://orders-cd834.firebaseio.com\",\r\n    projectId: \"orders-cd834\",\r\n    storageBucket: \"orders-cd834.appspot.com\",\r\n    messagingSenderId: \"1099359698304\",\r\n    appId: \"1:1099359698304:web:1f290a07e5ad1c1740d565\",\r\n    measurementId: \"G-HL9D0JZH4N\"\r\n  };\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const db = firebase.database();\r\n\r\n  ","import { Button, CircularProgress, FormControl, TextField, Typography } from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { TextField as TF } from 'formik-material-ui';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { number, object } from 'yup';\r\nimport getCityList from '../services/cityList';\r\nimport { db } from '../services/firebase';\r\nimport getStreets from \"../services/StreetsList\";\r\n\r\n\r\n\r\n\r\n\r\nfunction sendTextToFireBase(data) {\r\n    if (data !== undefined) {\r\n        // console.log(data);\r\n        db.ref('orders').push(data);\r\n    }\r\n}\r\n\r\nexport default function OrderInputForum() {\r\n    var cityListO = []\r\n    //var streetListO = []\r\n    const [streetList, setStreetList] = useState([])\r\n    const [streetListO, setStreetListO] = useState([])\r\n    const [cityList, setCityList] = useState([])\r\n    const [citySelected, setCitySelected] = useState(false)\r\n    const initialValues = {\r\n        status: 'inWork',\r\n        orderSetDate: new Date(),\r\n        reciverName: \"\",\r\n        city: '',\r\n        street: '',\r\n        house: ''\r\n    };\r\n    useEffect(() => {\r\n        getCityList(setCityList)\r\n    }, []);\r\n    cityListO = cityList.map((option) => {\r\n        const firstLetter = option[0].toUpperCase();\r\n        return {\r\n            firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n            title: option\r\n        };\r\n    })\r\n    useEffect(() => {\r\n        if (streetList !== undefined && streetList !== null) {\r\n            if (streetList.length > 0) {\r\n                setStreetListO(streetList.map((option) => {\r\n                    const firstLetter = option[0].toUpperCase();\r\n                    return {\r\n                        firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n                        title: option\r\n                    };\r\n                }));\r\n            }\r\n        }\r\n\r\n    }, [streetList]);\r\n    const dibug = false\r\n    return (\r\n        <div>\r\n            <Typography color=\"primary\" variant=\"h3\">\r\n                אנא הכנס פרטי הזמנה\r\n            </Typography>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(data, { setSubmitting, resetForm }) => {\r\n                    setSubmitting(true)\r\n                    data.DDdate = String(data.orderSetDate.getDate()).padStart(2, 0)\r\n                    data.MMdate = String(data.orderSetDate.getMonth() + 1).padStart(2, 0)\r\n                    data.YYdate = data.orderSetDate.getFullYear()\r\n                    data.MMtime = data.orderSetDate.getMinutes()\r\n                    data.HHtime = data.orderSetDate.getHours()\r\n                    data.SStime = data.orderSetDate.getSeconds()\r\n                    sendTextToFireBase(data)\r\n                    console.log(data);\r\n                    resetForm()\r\n\r\n                    setSubmitting(false)\r\n                }}\r\n                validateSchema={object({\r\n                    house: number().min(10),\r\n                    //reciverName: text()\r\n                })\r\n                }>\r\n                {({ values, isSubmitting, handleChange, setFieldValue }) => (\r\n                    <Form>\r\n                        <FormControl margin=\"normal\" required>\r\n                            <Field label=\"שם המקבל\" name=\"reciverName\" type=\"input\" variant=\"filled\" component={TF} />\r\n                            <Autocomplete\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                options={cityListO}\r\n                                getOptionLabel={(option) => option.title}\r\n                                groupBy={(option) => option.firstLetter}\r\n                                //style={{ width: 300 }}\r\n                                onChange={(e, value) => {\r\n                                    //console.log(\"enter change city\");\r\n                                    //console.log(getStreets(value.title));\r\n                                    if (value) {\r\n                                        //console.log(\"setStreetList\");\r\n                                        getStreets(value.title, setStreetList)\r\n                                        //console.log(getStreetsFromAutoCom(value.title));\r\n                                        //streetListO = getStreetsFromAutoCom(value.title)\r\n                                        setCitySelected(true)\r\n                                    }\r\n                                    else {\r\n                                        setCitySelected(false)\r\n                                        setStreetListO([])\r\n                                    }\r\n                                    //console.log(streetList);\r\n                                    setFieldValue(\r\n                                        \"city\",\r\n                                        value !== null ? value.title : initialValues.city\r\n                                    );\r\n                                }}\r\n                                noOptionsText=\"לא נמצא חיפוש מתאים...\"\r\n                                renderInput={(params) => <TextField {...params} label=\"עיר\" name=\"city\" type=\"input\" variant=\"filled\" id=\"city\" />}\r\n                                loadingText=\"טוען...\" />\r\n                            <Autocomplete\r\n                                id=\"street\"\r\n                                name=\"street\"\r\n                                options={streetListO ? streetListO : [\"\"]}\r\n                                getOptionLabel={(option) => option.title}\r\n                                groupBy={(option) => option.firstLetter}\r\n                                //style={{ width: 300 }}\r\n                                onChange={(e, value) => {\r\n                                    //console.log(value);\r\n                                    setFieldValue(\r\n                                        \"street\",\r\n                                        value !== null ? value.title : initialValues.street\r\n                                    );\r\n                                }}\r\n                                noOptionsText={citySelected ? \"לא נמצא חיפוש מתאים...\" : \"לא נבחר עיר\"}\r\n                                renderInput={(params) => <TextField {...params} label=\"רחוב\" name=\"street\" type=\"input\" variant=\"filled\" id=\"street\" />}\r\n                                loadingText=\"טוען...\" />\r\n                            <Field label=\"מספר בית\" name=\"house\" type=\"input\" variant=\"filled\" component={TF} />\r\n                            <Button variant=\"contained\" color=\"primary\" disabled={isSubmitting} type=\"submit\" endIcon={<Icon style={{ transform: \"scaleX(-1)\" }}>send</Icon>}>{isSubmitting ? <CircularProgress size=\"1\" /> : \"שלח\"}</Button>\r\n                        </FormControl>\r\n                        {dibug ? <pre>{JSON.stringify(values, null, 2)}</pre> : null}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div >\r\n    )\r\n}","import $ from \"jquery\";\r\nexport default function getCityList(setArrayInState) {\r\n    const GovURL = \"https://data.gov.il/dataset/3fc54b81-25b3-4ac7-87db-248c3e1602de/resource/72bd51be-512b-4430-b2d2-f3295c90e569/download/72bd51be-512b-4430-b2d2-f3295c90e569.xml\"\r\n    var cityList = []\r\n\r\n    $.ajax(\r\n        GovURL, {\r\n        dataType: \"xml\", success: function (data) {\r\n            $(data)\r\n                .find(\"ROW\")\r\n                .each(function () {\r\n                    const city = $(this)\r\n                    const cityNameOBJ = city.find(\"שם_ישוב\")\r\n                    //console.log(cityNameOBJ[0].textContent);\r\n                    cityList.push(cityNameOBJ[0].textContent.trim())\r\n                })\r\n            //console.log(cityList);\r\n            setArrayInState(cityList)\r\n        }\r\n    }\r\n    )\r\n\r\n}","import $ from \"jquery\";\r\n\r\nexport default function getStreets(city, setArrayInState, params) {\r\n    if (city !== \"\") {\r\n        const action = \"datastore_search\"\r\n        //const test = \"https://data.gov.il/api/3/action/datastore_search\"\r\n        var data = {\r\n            resource_id: 'a7296d1a-f8c9-4b70-96c2-6ebb4352f8e3', // the resource id\r\n            limit: 3200, // get 5 results\r\n            q: city, // query for 'jones'\r\n            fields: \"שם_ישוב,שם_רחוב\",\r\n            sort: \"שם_רחוב\"\r\n        };\r\n        var StreetsList = []\r\n        //console.log(StreetsList);\r\n        //console.log(\"typeof array \"+typeof (StreetsList));\r\n        const request = `https://data.gov.il/api/3/action/${action}`\r\n        $.ajax({\r\n            url: request,\r\n            data: data,\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                var streets = $(data.result)[0].records\r\n                /*\r\n                console.log(\"from api\");\r\n                console.log($(data.result)[0].records);\r\n                */\r\n                streets.forEach(street => {\r\n                    if (city.includes(street.שם_ישוב.trim())) {\r\n                        StreetsList.push(street.שם_רחוב.trim())\r\n                    }\r\n                });\r\n                if (StreetsList) {\r\n                    /*console.log(\"street\");\r\n                    console.log(StreetsList);\r\n                    console.log(typeof (StreetsList));\r\n                    console.log(StreetsList.length);*/\r\n                    setArrayInState(StreetsList)\r\n                }\r\n            }\r\n        })\r\n    }\r\n}","import Home from './Home';\r\nimport OrderPlace from './OrderPlace';\r\nimport Show from './Show';\r\n\r\n\r\nconst Routes = [\r\n    {\r\n        path: '/',\r\n        sidebarName: 'בית',\r\n        component: Home,\r\n        icon:\"home\"\r\n    },\r\n    {\r\n        path: '/Place-an-order',\r\n        sidebarName: 'הכנס הזמנה',\r\n        component: OrderPlace,\r\n        icon:\"input\"\r\n    },\r\n    {\r\n        path: '/Show',\r\n        sidebarName: 'צפה בהזמנות',\r\n        component: Show,\r\n        icon:\"inbox\"\r\n    },\r\n]\r\nexport default Routes\r\n","import React from 'react';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            home\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport OrderInputForum from '../components/OrderInputForum';\r\n\r\nexport default function OrderPlace(){\r\n    return(\r\n        <div>\r\n            <OrderInputForum/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Show() {\r\n    return (\r\n        <div>\r\n            show\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Routes from '../pages/Routes';\r\n\r\nexport default function Body() {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                {Routes.map((prop) => {\r\n                    return (\r\n                        <Route path={prop.path} exact component={prop.component}>\r\n                            <prop.component />\r\n                        </Route>\r\n                    )\r\n                })}\r\n                <Route component={Error} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import { Divider, List, ListItemIcon, ListItemText, MenuItem, MenuList, Typography } from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Routes from '../pages/Routes';\r\n\r\n\r\nexport default function Menu() {\r\n    const activeRoute = (routeName) => {\r\n        return window.location.pathname === routeName ? true : false;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Typography variant='inherit' display=\"block\" style={{ textAlign: \"center\", fontSize: \"25px\" }}>תפריט ראשי</Typography>\r\n            </div>\r\n            <Divider variant=\"middle\" />\r\n\r\n            <List>\r\n                <MenuList>\r\n                    {Routes.map((prop, key) => {\r\n                        return (\r\n                            <NavLink to={prop.path} style={{ textDecoration: 'none' }} key={key}>\r\n                                <MenuItem selected={activeRoute(prop.path)}>\r\n                                    <ListItemIcon ><Icon>{prop.icon}</Icon></ListItemIcon>\r\n                                    <ListItemText primary={prop.sidebarName} style={{ color: \"black\" }} />\r\n                                </MenuItem>\r\n                            </NavLink>\r\n                        )\r\n                    })}\r\n                </MenuList>\r\n            </List>\r\n        </div>\r\n    )\r\n}","import { AppBar, Button, Drawer, IconButton, Toolbar, Typography } from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport React from 'react';\r\nimport Menu from './Menu';\r\n\r\n\r\nexport default function NavBar() {\r\n    const [menuDrawerState, setMenuDrawerState] = React.useState(false);\r\n\r\n    const toggleDrawer = (open) => (event) => {\r\n        //console.log(event);\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setMenuDrawerState(open);\r\n    };\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\r\n                    <Icon>menu</Icon>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" >\r\n                    מערך המשלוחים\r\n          </Typography>\r\n                <Drawer open={menuDrawerState} onClose={toggleDrawer(false)}>\r\n                    <div\r\n                        role=\"presentation\"\r\n                        onClick={toggleDrawer(false)}\r\n                        onKeyDown={toggleDrawer(false)}\r\n                    >\r\n                        <Menu />\r\n                    </div>\r\n                </Drawer>\r\n                <Button color=\"inherit\" style={{ fontWeight: \"bold\" }} >התחבר</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import { jssPreset, StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport React from 'react';\nimport './App.css';\nimport MyTheme from './assets/MyTheme';\nimport Body from './components/Body';\nimport NavBar from './components/NavBar';\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\nfunction App() {\n\n  return (\n\n    <ThemeProvider theme={MyTheme}>\n      <StylesProvider jss={jss}>\n        <div className=\"App\" dir=\"rtl\">\n          <NavBar />\n          <Body />\n        </div>\n\n      </StylesProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}