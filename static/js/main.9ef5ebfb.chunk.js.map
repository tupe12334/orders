{"version":3,"sources":["services/firebase.js","services/cityList.js","services/StreetsList.js","components/OrderInputForum.js","assets/MyTheme.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","cityList","$","ajax","dataType","success","data","find","each","cityNameOBJ","this","push","textContent","trim","getStreets","city","setArrayInState","params","resource_id","limit","q","fields","sort","StreetsList","Array","request","url","streets","result","records","console","log","forEach","street","includes","שם_ישוב","שם_רחוב","OrderInputForum","cityListO","useState","streetList","setStreetList","streetListO","setStreetListO","initialValues","status","orderSetDate","Date","reciverName","house","map","option","firstLetter","toUpperCase","test","title","useEffect","undefined","JSON","stringify","length","Typography","color","variant","onSubmit","setSubmitting","resetForm","DDdate","String","getDate","padStart","MMdate","getMonth","YYdate","getFullYear","MMtime","getMinutes","HHtime","getHours","SStime","getSeconds","ref","sendTextToFireBase","values","isSubmitting","setFieldValue","handleChange","FormControl","margin","required","label","name","type","as","TextField","Autocomplete","id","options","getOptionLabel","groupBy","onChange","e","value","noOptionsText","renderInput","loadingText","Button","disabled","CircularProgress","size","MyTheme","createMuiTheme","direction","jss","create","plugins","jssPreset","rtl","App","React","Setspeed","speedPath","child","useLayoutEffect","on","snap","val","ThemeProvider","theme","StylesProvider","className","dir","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"kPAYEA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGV,IAAMC,EAAKV,IAASW,W,0BCVzBC,EAAW,GAEfC,IAAEC,KAHa,mKAIJ,CACHC,SAAS,MAAOC,QAAQ,SAAUC,GAC9BJ,IAAEI,GACDC,KAAK,OACLC,MAAK,WACF,IACMC,EADOP,IAAEQ,MACUH,KAAK,yCAE9BN,EAASU,KAAKF,EAAY,GAAGG,YAAYC,cAM1CZ,Q,oBClBA,SAASa,EAAWC,EAAMC,EAAiBC,GACtD,GAAa,KAATF,EAAa,CACb,IAEIT,EAAO,CACPY,YAAa,uCACbC,MAAO,KACPC,EAAGL,EACHM,OAAQ,8EACRC,KAAM,yCAENC,EAAc,IAAIC,MAIhBC,EAAO,2CAbE,oBAcfvB,IAAEC,KAAK,CACHuB,IAAKD,EACLnB,KAAMA,EACNF,SAAU,OACVC,QAAS,SAAUC,GACf,IAAIqB,EAAUzB,IAAEI,EAAKsB,QAAQ,GAAGC,QAChCC,QAAQC,IAAI,YACZD,QAAQC,IAAI7B,IAAEI,EAAKsB,QAAQ,GAAGC,SAE9BF,EAAQK,SAAQ,SAAAC,GACRlB,EAAKmB,SAASD,EAAOE,sCAAQtB,UAC7BU,EAAYZ,KAAKsB,EAAOG,sCAAQvB,YAIpCU,GAKAP,EAAgBO,OClBrB,SAASc,IACpB,IAAIC,EADkC,EAGFC,mBAAS,IAHP,mBAG/BC,EAH+B,KAGnBC,EAHmB,OAIAF,mBAAS,IAJT,mBAI/BG,EAJ+B,KAIlBC,EAJkB,KAKhCC,EAAgB,CAClBC,OAAQ,SACRC,aAAc,IAAIC,KAClBC,YAAa,GACbjC,KAAM,GACNkB,OAAQ,GACRgB,MAAO,IAEXX,EAAYrC,EAASiD,KAAI,SAACC,GACtB,IAAMC,EAAcD,EAAO,GAAGE,cAC9B,MAAO,CACHD,YAAa,QAAQE,KAAKF,GAAe,MAAQA,EACjDG,MAAOJ,MAIfK,qBAAU,gBACaC,IAAfjB,GAA2C,OAAfA,IAC5BV,QAAQC,IAAI,qBACZD,QAAQC,IAAI,WACZD,QAAQC,WAAYS,GACpBV,QAAQC,IAAI,gBACZD,QAAQC,IAAIS,GACZV,QAAQC,IAAI,eACZD,QAAQC,IAAI2B,KAAKC,UAAUnB,IAC3BV,QAAQC,IAAI,YACZD,QAAQC,IAAIS,EAAWoB,QACvB9B,QAAQC,IAAI,SAGRS,EAAWoB,OAAS,IAGpBjB,EAAeH,EAAWU,KAAI,SAACC,GAC3B,IAAMC,EAAcD,EAAO,GAAGE,cAC9B,MAAO,CACHD,YAAa,QAAQE,KAAKF,GAAe,MAAQA,EACjDG,MAAOJ,OAGfrB,QAAQC,IAAI,eACZD,QAAQC,IAAIW,OAIrB,CAACF,IACJV,QAAQC,IAAIW,GAEZ,OACI,6BACI,kBAACmB,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAAQ,MAApC,uGAGA,kBAAC,IAAD,CACInB,cAAeA,EACfoB,SAAU,SAAC1D,EAAD,GAAyC,IAAhC2D,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC9BD,GAAc,GACd3D,EAAK6D,OAASC,OAAO9D,EAAKwC,aAAauB,WAAWC,SAAS,EAAG,GAC9DhE,EAAKiE,OAASH,OAAO9D,EAAKwC,aAAa0B,WAAa,GAAGF,SAAS,EAAG,GACnEhE,EAAKmE,OAASnE,EAAKwC,aAAa4B,cAChCpE,EAAKqE,OAASrE,EAAKwC,aAAa8B,aAChCtE,EAAKuE,OAASvE,EAAKwC,aAAagC,WAChCxE,EAAKyE,OAASzE,EAAKwC,aAAakC,aA1EpD,SAA4B1E,QACXmD,IAATnD,IACAwB,QAAQC,IAAIzB,GACZP,EAAGkF,IAAI,UAAUtE,KAAKL,IAwEV4E,CAAmB5E,GACnBwB,QAAQC,IAAIzB,GACZ4D,IAEAD,GAAc,MAEjB,cAAGkB,OAAH,IAAWC,EAAX,EAAWA,aAA4BC,GAAvC,EAAyBC,aAAzB,EAAuCD,eAAvC,OACG,kBAAC,IAAD,KACI,kBAACE,EAAA,EAAD,CAAaC,OAAO,SAASC,UAAQ,GACjC,kBAAC,IAAD,CAAOC,MAAM,8CAAWC,KAAK,cAAcC,KAAK,QAAQ7B,QAAQ,SAAS8B,GAAIC,MAC7E,kBAACC,EAAA,EAAD,CACIC,GAAG,OACHL,KAAK,OACLM,QAAS3D,EACT4D,eAAgB,SAAC/C,GAAD,OAAYA,EAAOI,OACnC4C,QAAS,SAAChD,GAAD,OAAYA,EAAOC,aAE5BgD,SAAU,SAACC,EAAGC,GAGNA,IACAxE,QAAQC,IAAI,iBACZjB,EAAWwF,EAAM/C,MAAOd,IAM5B4C,EACI,OACU,OAAViB,EAAiBA,EAAM/C,MAAQX,EAAc7B,OAGrDwF,cAAc,8BACdC,YAAa,SAACvF,GAAD,OAAY,kBAAC6E,EAAA,EAAD,iBAAe7E,EAAf,CAAuByE,MAAM,qBAAMC,KAAK,OAAOC,KAAK,QAAQ7B,QAAQ,SAASiC,GAAG,WACzGS,YAAY,gCAChB,kBAACV,EAAA,EAAD,CACIC,GAAG,SACHL,KAAK,SACLM,QAASvD,GAA4B,CAAC,IACtCwD,eAAgB,SAAC/C,GAAD,OAAYA,EAAOI,OACnC4C,QAAS,SAAChD,GAAD,OAAYA,EAAOC,aAE5BgD,SAAU,SAACC,EAAGC,GACVxE,QAAQC,IAAIuE,GACZjB,EACI,SACU,OAAViB,EAAiBA,EAAM/C,MAAQX,EAAcX,SAGrDsE,cAAc,8BACdC,YAAa,SAACvF,GAAD,OAAY,kBAAC6E,EAAA,EAAD,iBAAe7E,EAAf,CAAuByE,MAAM,2BAAOC,KAAK,SAASC,KAAK,QAAQ7B,QAAQ,SAASiC,GAAG,aAC5GS,YAAY,gCAChB,kBAAC,IAAD,CAAOf,MAAM,8CAAWC,KAAK,QAAQC,KAAK,QAAQ7B,QAAQ,SAAS8B,GAAIC,MACvE,kBAACY,EAAA,EAAD,CAAQ3C,QAAQ,YAAYD,MAAM,UAAU6C,SAAUvB,EAAcQ,KAAK,UAAUR,EAAe,kBAACwB,EAAA,EAAD,CAAkBC,KAAK,MAAS,uBAE9E,U,gECxI9DC,EALFC,YAAe,CAC3BC,UAAW,QCSf,IAAMC,EAAMC,YAAO,CAAEC,QAAQ,GAAD,mBAAMC,cAAYD,SAAlB,CAA2BE,UA0BxCC,MAvBf,WAAgB,IAAD,EACaC,IAAMhF,SAAS,GAD5B,mBACCiF,GADD,WAEPC,EAAY1H,EAAGkF,MAAMyC,MAAM,SASjC,OARAH,IAAMI,iBAAgB,WACpBF,EAAUG,GAAG,SAAS,SAAAC,GACTA,EAAKC,MAChBhG,QAAQC,IAAI8F,EAAKC,OACjBN,EAASK,EAAKC,YAEf,IAGD,kBAACC,EAAA,EAAD,CAAeC,MAAOlB,GACpB,kBAACmB,EAAA,EAAD,CAAgBhB,IAAKA,GACnB,yBAAKiB,UAAU,MAAMC,IAAI,OACvB,kBAAC9F,EAAD,UCnBU+F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvH,QAAQuH,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9ef5ebfb.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCKxKgE1Mh7DauQBBhHAnJnnuIJaRLhj74\",\r\n    authDomain: \"orders-cd834.firebaseapp.com\",\r\n    databaseURL: \"https://orders-cd834.firebaseio.com\",\r\n    projectId: \"orders-cd834\",\r\n    storageBucket: \"orders-cd834.appspot.com\",\r\n    messagingSenderId: \"1099359698304\",\r\n    appId: \"1:1099359698304:web:1f290a07e5ad1c1740d565\",\r\n    measurementId: \"G-HL9D0JZH4N\"\r\n  };\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const db = firebase.database();\r\n\r\n  ","import $ from \"jquery\";\r\n\r\nconst GovURL = \"https://data.gov.il/dataset/3fc54b81-25b3-4ac7-87db-248c3e1602de/resource/72bd51be-512b-4430-b2d2-f3295c90e569/download/72bd51be-512b-4430-b2d2-f3295c90e569.xml\"\r\nvar cityList = []\r\n\r\n$.ajax(\r\n    GovURL,{\r\n        dataType:\"xml\", success:function (data) {\r\n            $(data)\r\n            .find(\"ROW\")\r\n            .each(function(){\r\n                const city = $(this)\r\n                const cityNameOBJ = city.find(\"שם_ישוב\")\r\n                //console.log(cityNameOBJ[0].textContent);\r\n                cityList.push(cityNameOBJ[0].textContent.trim())\r\n            })\r\n        }\r\n    }\r\n)\r\n//console.log(cityList);\r\nexport default cityList;","import $ from \"jquery\";\r\n\r\nexport default function getStreets(city, setArrayInState, params) {\r\n    if (city !== \"\") {\r\n        const action = \"datastore_search\"\r\n        const test = \"https://data.gov.il/api/3/action/datastore_search\"\r\n        var data = {\r\n            resource_id: 'a7296d1a-f8c9-4b70-96c2-6ebb4352f8e3', // the resource id\r\n            limit: 3200, // get 5 results\r\n            q: city, // query for 'jones'\r\n            fields: \"שם_ישוב,שם_רחוב\",\r\n            sort: \"שם_רחוב\"\r\n        };\r\n        var StreetsList = new Array()\r\n        //console.log(StreetsList);\r\n        //console.log(\"typeof array \"+typeof (StreetsList));\r\n        var totalList = []\r\n        const request = `https://data.gov.il/api/3/action/${action}`\r\n        $.ajax({\r\n            url: request,\r\n            data: data,\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                var streets = $(data.result)[0].records\r\n                console.log(\"from api\");\r\n                console.log($(data.result)[0].records);\r\n                var counter = 1\r\n                streets.forEach(street => {\r\n                    if (city.includes(street.שם_ישוב.trim())) {\r\n                        StreetsList.push(street.שם_רחוב.trim())\r\n                        counter++\r\n                    }\r\n                });\r\n                if (StreetsList) {\r\n                    /*console.log(\"street\");\r\n                    console.log(StreetsList);\r\n                    console.log(typeof (StreetsList));\r\n                    console.log(StreetsList.length);*/\r\n                    setArrayInState(StreetsList)\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport async function getStreetsFromAutoCom(city) {\r\n    console.log(\"enter getStreetsFromAutoCom\");\r\n    var streetList\r\n    var p = new Promise((resolve, reject) => {\r\n        console.log(\"enter promise\");\r\n        return resolve(getStreets(city))\r\n    })\r\n    var streetList = await p\r\n    //var streetList = await promise\r\n    console.log(\"promise result 2\");\r\n    console.log(streetList);\r\n\r\n\r\n    var p2 = new Promise((resolve, reject) => {\r\n        console.log(\"enter promise streetListO\");\r\n        var t = []\r\n        var counter = 0\r\n        //console.log(streetList);\r\n        streetList.forEach(element => {\r\n            console.log(counter++);\r\n        });\r\n        var t = streetList.map((option) => {\r\n            const firstLetter = option[0].toUpperCase();\r\n            return {\r\n                firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n                title: option\r\n            };\r\n        });\r\n        return resolve(t)\r\n    })\r\n    var streetListO = await p2\r\n\r\n    console.log(\"t\");\r\n    console.log(streetListO);\r\n    return (streetListO)\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FormControl, TextField, Button, Typography, CircularProgress } from '@material-ui/core';\r\nimport { db } from '../services/firebase';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport cityList from '../services/cityList';\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport getStreets, { getStreetsFromAutoCom } from \"../services/StreetsList\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction sendTextToFireBase(data) {\r\n    if (data !== undefined) {\r\n        console.log(data);\r\n        db.ref('orders').push(data);\r\n    }\r\n}\r\n\r\nexport default function OrderInputForum() {\r\n    var cityListO = []\r\n    //var streetListO = []\r\n    const [streetList, setStreetList] = useState([])\r\n    const [streetListO, setStreetListO] = useState([])\r\n    const initialValues = {\r\n        status: 'inWork',\r\n        orderSetDate: new Date(),\r\n        reciverName: \"\",\r\n        city: '',\r\n        street: '',\r\n        house: ''\r\n    };\r\n    cityListO = cityList.map((option) => {\r\n        const firstLetter = option[0].toUpperCase();\r\n        return {\r\n            firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n            title: option\r\n        };\r\n    })\r\n    //console.log(streetList.length);\r\n    useEffect(() => {\r\n        if (streetList !== undefined && streetList !== null) {\r\n            console.log(\"streetList change\");\r\n            console.log(\"typeof:\");\r\n            console.log(typeof (streetList));\r\n            console.log(\"streetList: \");\r\n            console.log(streetList)\r\n            console.log(\"stringify: \");\r\n            console.log(JSON.stringify(streetList));\r\n            console.log(\"length: \");\r\n            console.log(streetList.length);\r\n            console.log(\"slice\");\r\n            //console.log(streetList.slice());\r\n\r\n            if (streetList.length > 0) {\r\n                //console.log(\"streetlist\");\r\n                //console.log(streetList);\r\n                setStreetListO(streetList.map((option) => {\r\n                    const firstLetter = option[0].toUpperCase();\r\n                    return {\r\n                        firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n                        title: option\r\n                    };\r\n                }));\r\n                console.log(\"StreetListO\");\r\n                console.log(streetListO);\r\n            }\r\n        }\r\n\r\n    }, [streetList]);\r\n    console.log(streetListO);\r\n    const dibug = false\r\n    return (\r\n        <div>\r\n            <Typography color=\"primary\" variant=\"h3\">\r\n                אנא הכנס פרטי הזמנה\r\n            </Typography>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(data, { setSubmitting, resetForm }) => {\r\n                    setSubmitting(true)\r\n                    data.DDdate = String(data.orderSetDate.getDate()).padStart(2, 0)\r\n                    data.MMdate = String(data.orderSetDate.getMonth() + 1).padStart(2, 0)\r\n                    data.YYdate = data.orderSetDate.getFullYear()\r\n                    data.MMtime = data.orderSetDate.getMinutes()\r\n                    data.HHtime = data.orderSetDate.getHours()\r\n                    data.SStime = data.orderSetDate.getSeconds()\r\n                    sendTextToFireBase(data)\r\n                    console.log(data);\r\n                    resetForm()\r\n\r\n                    setSubmitting(false)\r\n                }}>\r\n                {({ values, isSubmitting, handleChange, setFieldValue }) => (\r\n                    <Form>\r\n                        <FormControl margin=\"normal\" required>\r\n                            <Field label=\"שם המקבל\" name=\"reciverName\" type=\"input\" variant=\"filled\" as={TextField} />\r\n                            <Autocomplete\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                options={cityListO}\r\n                                getOptionLabel={(option) => option.title}\r\n                                groupBy={(option) => option.firstLetter}\r\n                                //style={{ width: 300 }}\r\n                                onChange={(e, value) => {\r\n                                    //console.log(\"enter change city\");\r\n                                    //console.log(getStreets(value.title));\r\n                                    if (value) {\r\n                                        console.log(\"setStreetList\");\r\n                                        getStreets(value.title, setStreetList)\r\n                                        //console.log(getStreetsFromAutoCom(value.title));\r\n                                        //streetListO = getStreetsFromAutoCom(value.title)\r\n\r\n                                    }\r\n                                    //console.log(streetList);\r\n                                    setFieldValue(\r\n                                        \"city\",\r\n                                        value !== null ? value.title : initialValues.city\r\n                                    );\r\n                                }}\r\n                                noOptionsText=\"טוען...\"\r\n                                renderInput={(params) => <TextField {...params} label=\"עיר\" name=\"city\" type=\"input\" variant=\"filled\" id=\"city\" />}\r\n                                loadingText=\"טוען...\" />\r\n                            <Autocomplete\r\n                                id=\"street\"\r\n                                name=\"street\"\r\n                                options={streetListO ? streetListO : [\"\"]}\r\n                                getOptionLabel={(option) => option.title}\r\n                                groupBy={(option) => option.firstLetter}\r\n                                //style={{ width: 300 }}\r\n                                onChange={(e, value) => {\r\n                                    console.log(value);\r\n                                    setFieldValue(\r\n                                        \"street\",\r\n                                        value !== null ? value.title : initialValues.street\r\n                                    );\r\n                                }}\r\n                                noOptionsText=\"טוען...\"\r\n                                renderInput={(params) => <TextField {...params} label=\"רחוב\" name=\"street\" type=\"input\" variant=\"filled\" id=\"street\" />}\r\n                                loadingText=\"טוען...\" />\r\n                            <Field label=\"מספר בית\" name=\"house\" type=\"input\" variant=\"filled\" as={TextField} />\r\n                            <Button variant=\"contained\" color=\"primary\" disabled={isSubmitting} type=\"submit\">{isSubmitting ? <CircularProgress size=\"1\" /> : \"שלח\"}</Button>\r\n                        </FormControl>\r\n                        {dibug ? <pre>{JSON.stringify(values, null, 2)}</pre> : null}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}","import {createMuiTheme} from '@material-ui/core/styles'\r\n\r\n\r\nconst MyTheme = createMuiTheme({\r\n    direction: 'rtl',\r\n    \r\n  });\r\n\r\n  export default  MyTheme","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OrderInputForum from './components/OrderInputForum';\nimport { db } from './services/firebase';\nimport rtl from 'jss-rtl';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport { create } from 'jss';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport MyTheme from './assets/MyTheme'\nimport GeneralForm from './components/GeneralForm';\n\n\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\n\nfunction App() {\n  const [speed, Setspeed] = React.useState(5)\n  const speedPath = db.ref().child('speed')\n  React.useLayoutEffect(() => {\n    speedPath.on('value', snap => {\n      tempspeed: snap.val()\n      console.log(snap.val());\n      Setspeed(snap.val());\n    })\n  }, []);\n  //<GeneralForm />\n  return (\n    <ThemeProvider theme={MyTheme}>\n      <StylesProvider jss={jss}>\n        <div className=\"App\" dir=\"rtl\">\n          <OrderInputForum />\n        </div>\n      </StylesProvider>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}