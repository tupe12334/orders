{"version":3,"sources":["logo.svg","services/firebase.js","services/cityList.js","services/StreetsList.js","components/OrderInputForum.js","assets/MyTheme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","cityList","$","ajax","dataType","success","data","find","each","cityNameOBJ","this","push","textContent","StreetsList","require","document","X2JS","xml2js","console","log","parser","Parser","parseString","toString","err","result","OrderInputForum","onChange","event","tempad","address","tar","target","id","substring","indexOf","name","value","city","street","house","SetAd","React","useState","status","cityListO","map","option","firstLetter","toUpperCase","test","title","Typography","color","variant","FormControl","margin","required","TextField","label","Autocomplete","options","getOptionLabel","groupBy","noOptionsText","renderInput","params","loadingText","Button","onClick","undefined","ref","MyTheme","createMuiTheme","direction","jss","create","plugins","jssPreset","rtl","App","Setspeed","speedPath","child","useLayoutEffect","on","snap","val","ThemeProvider","theme","StylesProvider","className","dir","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd244d0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCKxKgE1Mh7DauQBBhHAnJnnuIJaRLhj74\",\r\n    authDomain: \"orders-cd834.firebaseapp.com\",\r\n    databaseURL: \"https://orders-cd834.firebaseio.com\",\r\n    projectId: \"orders-cd834\",\r\n    storageBucket: \"orders-cd834.appspot.com\",\r\n    messagingSenderId: \"1099359698304\",\r\n    appId: \"1:1099359698304:web:1f290a07e5ad1c1740d565\",\r\n    measurementId: \"G-HL9D0JZH4N\"\r\n  };\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const db = firebase.database();\r\n\r\n  ","import $ from \"jquery\";\r\n\r\nconst GovURL = \"https://data.gov.il/dataset/3fc54b81-25b3-4ac7-87db-248c3e1602de/resource/72bd51be-512b-4430-b2d2-f3295c90e569/download/72bd51be-512b-4430-b2d2-f3295c90e569.xml\"\r\nvar cityList = []\r\n\r\n$.ajax(\r\n    GovURL,{\r\n        dataType:\"xml\", success:function (data) {\r\n            $(data)\r\n            .find(\"ROW\")\r\n            .each(function(){\r\n                const city = $(this)\r\n                const cityNameOBJ = city.find(\"שם_ישוב\")\r\n                //console.log(cityNameOBJ[0].textContent);\r\n                cityList.push(cityNameOBJ[0].textContent)\r\n            })\r\n        }\r\n    }\r\n)\r\n//console.log(cityList);\r\nexport default cityList;","import $ from \"jquery\";\r\nimport xml2js from 'xml2js';\r\nimport X2JS from 'x2js';\r\n\r\n\r\n//import fs from 'fs'\r\nconst fs = require('fs')\r\n\r\nconst GovURL = \"https://data.gov.il/dataset/d2581732-eca4-4988-b986-df8e791a1d60/resource/d04feead-6431-427f-81bc-d6a24151c1fb/download/d04feead-6431-427f-81bc-d6a24151c1fb.xml\"\r\nvar StreetsList = []\r\nvar totalList = []\r\n$.ajax(\r\n    GovURL, {\r\n    dataType: \"xml\", success: function (data) {\r\n        //console.log(data);\r\n        var counter = 0;\r\n        $(data)\r\n        var x2js = new X2JS();\r\n        //console.log(x2js);\r\n        var document = x2js.xml2js(data);\r\n        console.log(document);\r\n        var parser = new xml2js.Parser();\r\n        console.log();\r\n        parser.parseString(data.toString(), function (err, result) {\r\n            console.log(result);\r\n            console.log('Done');\r\n        });\r\n        //console.log($(this));\r\n        //console.log(city);\r\n        //const cityNameOBJ = city.find(\"שם_ישוב\")\r\n        //console.log(cityNameOBJ[0].textContent);\r\n        // cityList.push(cityNameOBJ[0].textContent)\r\n    }\r\n})\r\n\r\nconsole.log(StreetsList);\r\nexport default StreetsList;","import React from 'react';\r\nimport { FormControl, TextField, Button, Typography } from '@material-ui/core';\r\nimport { db } from '../services/firebase';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport cityList from '../services/cityList';\r\nimport StreetsList from '../services/StreetsList';\r\n\r\nvar t = StreetsList\r\n\r\nfunction sendTextToFireBase(data) {\r\n\r\n    if (data != undefined) {\r\n        console.log(data);\r\n        db.ref('orders').push(data);\r\n    }\r\n\r\n}\r\n\r\nexport default function OrderInputForum() {\r\n    const onChange = event => {\r\n        var tempad = address\r\n        var tar = event.target\r\n        var theId = tar.id.substring(0, tar.id.indexOf('TextField'))\r\n        switch (theId) {\r\n            case \"name\":\r\n                tempad.name = tar.value\r\n                break;\r\n            case \"city\":\r\n                tempad.city = tar.value\r\n                break;\r\n            case \"street\":\r\n                tempad.street = tar.value\r\n                break;\r\n            case \"house\":\r\n                tempad.house = tar.value\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n        SetAd(tempad);\r\n        //console.log(address);\r\n    }\r\n\r\n    const [address, SetAd] = React.useState({ status: 'inWork' })\r\n\r\n    const cityListO = cityList.map((option) => {\r\n        const firstLetter = option[0].toUpperCase();\r\n\r\n        //console.log(option)\r\n        return {\r\n            firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n            title: option\r\n        };\r\n\r\n    });\r\n\r\n\r\n    //console.log(cityListO);\r\n    return (\r\n        <div>\r\n            <Typography color=\"primary\" variant=\"h3\">\r\n                 אנא הכנס פרטי הזמנה\r\n            </Typography>\r\n            <form>\r\n                <FormControl margin=\"normal\" required>\r\n                    <TextField id=\"nameTextField\" label=\"שם המקבל\" variant=\"filled\" onChange={onChange} />\r\n                    <Autocomplete\r\n                        id=\"cityTextField\"\r\n                        options={cityListO}\r\n                        getOptionLabel={(option) => option.title}\r\n                        groupBy={(option) => option.firstLetter}\r\n                        //style={{ width: 300 }}\r\n                        noOptionsText=\"טוען...\"\r\n                        renderInput={(params) => <TextField  {...params} id=\"cityTextField\" label=\"עיר\" variant=\"filled\" onChange={onChange} />}\r\n                        loadingText=\"טוען...\"\r\n                    />\r\n\r\n                    <TextField id=\"streetTextField\" label=\"רחוב\" variant=\"filled\" onChange={onChange} />\r\n                    <TextField id=\"houseTextField\" label=\"מספר בית\" variant=\"filled\" onChange={onChange} />\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => { sendTextToFireBase(address) }}>שלח</Button>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}","import {createMuiTheme} from '@material-ui/core/styles'\r\n\r\n\r\nconst MyTheme = createMuiTheme({\r\n    direction: 'rtl',\r\n  });\r\n\r\n  export default  MyTheme","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OrderInputForum from './components/OrderInputForum';\nimport { db } from './services/firebase';\nimport rtl from 'jss-rtl';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport { create } from 'jss';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport MyTheme from './assets/MyTheme'\n\n\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\n\nfunction App() {\n  const [speed, Setspeed] = React.useState(5)\n  const speedPath = db.ref().child('speed')\n  React.useLayoutEffect(() => {\n    speedPath.on('value', snap => {\n      tempspeed: snap.val()\n      console.log(snap.val());\n      Setspeed(snap.val());\n    })\n  }, []);\n\n  return (\n    <ThemeProvider theme={MyTheme}>\n      <StylesProvider jss={jss}>\n        <div className=\"App\" dir=\"rtl\">\n          <OrderInputForum />\n        </div>\n      </StylesProvider>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}